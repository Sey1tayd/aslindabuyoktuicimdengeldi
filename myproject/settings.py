"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read from env; fallback only for local dev
SECRET_KEY = os.environ.get('SECRET_KEY', f'benwannasetthesifreastheprojectName_bu1sl1nd1yoktu1ci3den6e1d1_[olarak_degistirmek]iseteim')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', '1') == '1'

_env_allowed_hosts = os.environ.get('ALLOWED_HOSTS')
if _env_allowed_hosts:
    ALLOWED_HOSTS = [h for h in _env_allowed_hosts.split(',') if h]
else:
    # Sensible defaults for Railway and local dev
    ALLOWED_HOSTS = ['.up.railway.app', '.railway.app', 'localhost', '127.0.0.1']

# For Railway/production CSRF
_env_csrf = os.environ.get('CSRF_TRUSTED_ORIGINS')
if _env_csrf:
    CSRF_TRUSTED_ORIGINS = [o for o in _env_csrf.split(',') if o]
else:
    CSRF_TRUSTED_ORIGINS = ['https://*.up.railway.app', 'https://*.railway.app']

# Behind Railway/Proxies
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Secure cookies in production
if not DEBUG:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.categories',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

_ssl_required_flag = os.environ.get('DATABASE_SSL_REQUIRED')
_ssl_required = (_ssl_required_flag == '1') if _ssl_required_flag is not None else (not DEBUG)

DATABASES = {
    'default': dj_database_url.parse(
        os.environ.get('DATABASE_URL', f"sqlite:///{BASE_DIR / 'db.sqlite3'}"),
        conn_max_age=600,
        ssl_require=_ssl_required,
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'tr-tr'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise static files storage for production
if not DEBUG:
    STORAGES = {
        'default': {
            'BACKEND': 'django.core.files.storage.FileSystemStorage',
        },
        'staticfiles': {
            'BACKEND': 'whitenoise.storage.CompressedStaticFilesStorage',
        },
    }

# Media files configuration
# Railway Volumes: Mount volume at /data/media in Railway dashboard
# Environment variable: RAILWAY_VOLUME_MOUNT_PATH (default: /data/media)
# If volume not set, fallback to BASE_DIR / 'media' (ephemeral)
RAILWAY_VOLUME_MOUNT_PATH = os.environ.get('RAILWAY_VOLUME_MOUNT_PATH', '/data/media')

# Check if volume path exists, otherwise use BASE_DIR / 'media'
if os.path.exists(RAILWAY_VOLUME_MOUNT_PATH):
    MEDIA_ROOT = Path(RAILWAY_VOLUME_MOUNT_PATH)
else:
    MEDIA_ROOT = BASE_DIR / 'media'
    # Create media directory if it doesn't exist
    MEDIA_ROOT.mkdir(parents=True, exist_ok=True)

# Ensure MEDIA_ROOT is a string for Django's serve view
# Also ensure categories subdirectory exists
MEDIA_ROOT = str(MEDIA_ROOT)
os.makedirs(os.path.join(MEDIA_ROOT, 'categories'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'products'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'brands'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'hero'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'promos'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'blog'), exist_ok=True)
os.makedirs(os.path.join(MEDIA_ROOT, 'site'), exist_ok=True)

# Debug logging (only in development)
if DEBUG:
    print(f"MEDIA_ROOT: {MEDIA_ROOT}")
    print(f"MEDIA_URL: /media/")
    print(f"Volume path exists: {os.path.exists(RAILWAY_VOLUME_MOUNT_PATH)}")

MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
